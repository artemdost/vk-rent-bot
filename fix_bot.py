# fix_bot.py
import re
import os

def fix_state_dispenser_delete(file_path):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –≤—ã–∑–æ–≤—ã bot.state_dispenser.delete(), 
    –æ–±–æ—Ä–∞—á–∏–≤–∞—è –∏—Ö –≤ try-except –±–ª–æ–∫–∏.
    """
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = file_path + '.backup'
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ await bot.state_dispenser.delete(...)
    pattern = r'(\s*)(await bot\.state_dispenser\.delete\([^)]+\))'
    
    def replace_func(match):
        indent = match.group(1)
        delete_call = match.group(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±–µ—Ä–Ω—É—Ç –ª–∏ —É–∂–µ –≤ try-except
        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        start = max(0, match.start() - 100)
        context = content[start:match.end()]
        
        if 'try:' in context and 'except' in context:
            # –£–∂–µ –æ–±–µ—Ä–Ω—É—Ç, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            return match.group(0)
        
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try-except
        replacement = f"{indent}try:\n{indent}    {delete_call}\n{indent}except (KeyError, Exception):\n{indent}    pass"
        return replacement
    
    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
    fixed_content = re.sub(pattern, replace_func, content)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω
    original_count = len(re.findall(pattern, content))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(fixed_content)
    
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {original_count} –≤—ã–∑–æ–≤–æ–≤ bot.state_dispenser.delete() –≤ {file_path}")
    return original_count


if __name__ == "__main__":
    # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É
    file_to_fix = "post_flow.py"
    
    if not os.path.exists(file_to_fix):
        print(f"‚ùå –§–∞–π–ª {file_to_fix} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        exit(1)
    
    print(f"üîß –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {file_to_fix}...")
    count = fix_state_dispenser_delete(file_to_fix)
    
    if count > 0:
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –º–µ—Å—Ç.")
        print(f"üìù –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {file_to_fix}.backup")
        print(f"‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞!")
    else:
        print("‚ÑπÔ∏è  –ù–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.")