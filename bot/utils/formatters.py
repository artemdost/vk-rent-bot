"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö.
"""
import re
from typing import Any, Dict, List


def format_price_display(value: Any) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    if value is None:
        return "‚Äî"
    try:
        if isinstance(value, str):
            digits = re.sub(r"\D", "", value)
            if not digits:
                return value
            numeric = int(digits)
        else:
            numeric = int(value)
    except (TypeError, ValueError):
        return str(value)

    formatted = format(numeric, ",").replace(",", ".")
    return f"{formatted} ‚ÇΩ"


def build_post_text(draft: Dict[str, Any]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    parts: List[str] = []

    if draft.get("price") is not None:
        parts.append(f"üí∞ –¶–µ–Ω–∞: {format_price_display(draft.get('price'))}")
    if draft.get("district"):
        parts.append(f"üèô –†–∞–π–æ–Ω: {draft.get('district')}")
    if draft.get("address"):
        parts.append(f"üìç –ê–¥—Ä–µ—Å: {draft.get('address')}")
    if draft.get("floor") is not None:
        parts.append(f"üè¢ –≠—Ç–∞–∂: {draft.get('floor')}")
    if draft.get("rooms") is not None:
        parts.append(f"üö™ –ö–æ–º–Ω–∞—Ç: {draft.get('rooms')}")

    if draft.get("description"):
        parts.append("")
        parts.append(draft.get("description"))

    parts.append("")
    if draft.get("fio"):
        parts.append(f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {draft.get('fio')}")
    if draft.get("phone"):
        parts.append(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {draft.get('phone')}")

    return "\n".join(parts).strip()


def format_preview_text(draft: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    price_formatted = format_price_display(draft.get("price"))

    return (
        f"üìå –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        f"üí∞ –¶–µ–Ω–∞: {price_formatted}\n"
        f"üèô –†–∞–π–æ–Ω: {draft.get('district','‚Äî')}\n"
        f"üìç –ê–¥—Ä–µ—Å: {draft.get('address','‚Äî')}\n"
        f"üè¢ –≠—Ç–∞–∂: {draft.get('floor','‚Äî')}\n"
        f"üö™ –ö–æ–º–Ω–∞—Ç: {draft.get('rooms','‚Äî')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{draft.get('description','‚Äî')}\n\n"
        f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {draft.get('fio','‚Äî')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {draft.get('phone','‚Äî')}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, "
        "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å ...¬ª, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ."
    )


def format_search_result(index: int, item: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞."""
    post_id = item.get("id")
    if post_id is None:
        return f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Ññ{index}"
    return f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Ññ{index}"
