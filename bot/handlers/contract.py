"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∞—Ä–µ–Ω–¥—ã.
"""
import logging
from vkbottle import Keyboard, KeyboardButtonColor, Text
from vkbottle.bot import Message
from bot.bot_instance import bot
from bot.states import ContractStates, CONTRACT_PROMPTS
from bot.constants import Button, Message as Msg
from bot.services.document_parser import DocumentParser
from bot.services.contract_analyzer import ContractAnalyzer, RiskLevel


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
document_parser = DocumentParser()
contract_analyzer = ContractAnalyzer()
logger = logging.getLogger(__name__)


@bot.on.message(text=Button.CHECK_CONTRACT)
async def start_contract_check(message: Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∞."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await bot.state_dispenser.set(message.peer_id, ContractStates.UPLOAD)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    kb = Keyboard(inline=True)
    kb.add(Text(Button.CANCEL), color=KeyboardButtonColor.NEGATIVE)

    await message.answer(
        CONTRACT_PROMPTS[ContractStates.UPLOAD],
        keyboard=kb.get_json()
    )


@bot.on.message(state=ContractStates.UPLOAD)
async def handle_contract_upload(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text and message.text.lower() in [Button.CANCEL.lower(), Button.MENU.lower(), "–æ—Ç–º–µ–Ω–∞", "–º–µ–Ω—é"]:
        await bot.state_dispenser.delete(message.peer_id)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from bot.keyboards.menu import main_menu_inline
        await message.answer(
            "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            keyboard=main_menu_inline()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
    attachments = message.attachments

    if not attachments:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        kb = Keyboard(inline=True)
        kb.add(Text(Button.CANCEL), color=KeyboardButtonColor.NEGATIVE)

        await message.answer(
            Msg.CONTRACT_ERROR_NO_FILES + "\n\n" + CONTRACT_PROMPTS[ContractStates.UPLOAD],
            keyboard=kb.get_json()
        )
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await bot.state_dispenser.set(message.peer_id, ContractStates.PROCESSING)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    await message.answer(CONTRACT_PROMPTS[ContractStates.PROCESSING])

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π
        all_texts = []
        processed_files = []

        for attachment in attachments:
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            file_type = document_parser.get_file_type_description(attachment)

            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            await message.answer(Msg.CONTRACT_RECEIVED.format(file_type=file_type))

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = await document_parser.extract_text_from_attachment(attachment)

            if text:
                all_texts.append(text)
                processed_files.append(file_type)
            else:
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {file_type}")

        if not all_texts:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            await bot.state_dispenser.delete(message.peer_id)

            kb = Keyboard(inline=True)
            kb.add(Text(Button.CHECK_CONTRACT), color=KeyboardButtonColor.POSITIVE)
            kb.row()
            kb.add(Text(Button.MENU), color=KeyboardButtonColor.NEGATIVE)

            await message.answer(
                Msg.CONTRACT_ERROR_PARSE + "\n\n" +
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.",
                keyboard=kb.get_json()
            )
            return

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        combined_text = "\n\n".join(all_texts)

        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        files_info = f"üìÇ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(processed_files)}"
        await message.answer(f"{files_info}\n\n{Msg.CONTRACT_ANALYZING}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä
        analysis_result = await contract_analyzer.analyze_contract(combined_text)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await bot.state_dispenser.set(message.peer_id, ContractStates.RESULTS)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è VK
        formatted_result = contract_analyzer.format_analysis_for_vk(analysis_result)

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        max_message_length = 4000
        if len(formatted_result) > max_message_length:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
            parts = []
            current_part = []
            current_length = 0

            for line in formatted_result.split('\n'):
                if current_length + len(line) + 1 > max_message_length:
                    parts.append('\n'.join(current_part))
                    current_part = [line]
                    current_length = len(line)
                else:
                    current_part.append(line)
                    current_length += len(line) + 1

            if current_part:
                parts.append('\n'.join(current_part))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    kb = Keyboard(inline=True)
                    kb.add(Text(Button.CHECK_CONTRACT), color=KeyboardButtonColor.POSITIVE)
                    kb.row()
                    kb.add(Text(Button.MENU), color=KeyboardButtonColor.PRIMARY)

                    await message.answer(
                        part + "\n\n" + Msg.CONTRACT_BACK_TO_MENU,
                        keyboard=kb.get_json()
                    )
                else:
                    await message.answer(part)

        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            kb = Keyboard(inline=True)
            kb.add(Text(Button.CHECK_CONTRACT), color=KeyboardButtonColor.POSITIVE)
            kb.row()
            kb.add(Text(Button.MENU), color=KeyboardButtonColor.PRIMARY)

            await message.answer(
                formatted_result + "\n\n" + Msg.CONTRACT_BACK_TO_MENU,
                keyboard=kb.get_json()
            )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await bot.state_dispenser.delete(message.peer_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–≥–æ–≤–æ—Ä–∞: {e}", exc_info=True)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await bot.state_dispenser.delete(message.peer_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        kb = Keyboard(inline=True)
        kb.add(Text(Button.CHECK_CONTRACT), color=KeyboardButtonColor.POSITIVE)
        kb.row()
        kb.add(Text(Button.MENU), color=KeyboardButtonColor.NEGATIVE)

        await message.answer(
            Msg.CONTRACT_ERROR_ANALYSIS + "\n\n" +
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
            "‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç\n" +
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–Ω–∞–ª–∏–∑–∞\n" +
            "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞\n\n" +
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            keyboard=kb.get_json()
        )


@bot.on.message(state=ContractStates.RESULTS)
async def handle_results_state(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    # –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é
    await bot.state_dispenser.delete(message.peer_id)

    from bot.keyboards.menu import main_menu_inline

    if message.text == Button.CHECK_CONTRACT:
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        await start_contract_check(message)
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            keyboard=main_menu_inline()
        )