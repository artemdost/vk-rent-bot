"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥.
"""
import json
import time
import random
from typing import Optional, Dict
from vkbottle.bot import Message
from vkbottle import GroupEventType, GroupTypes

from bot.bot_instance import bot, user_data
from bot.config import MENU_GREETING, START_COMMANDS, SUPPORT_URL, ALLOW_GREETING_SUPPRESS_SECONDS
from bot.keyboards import main_menu_inline

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
_recent_allow_greetings: Dict[int, float] = {}


def _cleanup_recent_allow(now: float) -> None:
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è—Ö."""
    stale = [
        uid
        for uid, mark in _recent_allow_greetings.items()
        if now - mark > ALLOW_GREETING_SUPPRESS_SECONDS
    ]
    for uid in stale:
        _recent_allow_greetings.pop(uid, None)


def _mark_allow_greeting(user_id: int) -> None:
    """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."""
    now = time.monotonic()
    _recent_allow_greetings[user_id] = now
    _cleanup_recent_allow(now)


def _allow_greeted_recently(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    now = time.monotonic()
    ts = _recent_allow_greetings.pop(user_id, None)
    _cleanup_recent_allow(now)
    return ts is not None and now - ts <= ALLOW_GREETING_SUPPRESS_SECONDS


def _random_id() -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    return random.randint(-2_147_483_648, 2_147_483_647)


def _is_start_trigger(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç–∞—Ä—Ç."""
    text_value = (message.text or "").strip().lower()
    if text_value in START_COMMANDS:
        return True

    payload = getattr(message, "payload", None)
    payload_getter = getattr(message, "dict", None)

    if not payload and callable(payload_getter):
        try:
            payload = payload_getter().get("payload")
        except Exception:
            payload = None

    if not payload:
        return False

    if isinstance(payload, str):
        try:
            data = json.loads(payload)
        except (ValueError, TypeError):
            return False
    elif isinstance(payload, dict):
        data = payload
    else:
        return False

    command = data.get("command")
    return isinstance(command, str) and command.lower() == "start"


@bot.on.message(func=_is_start_trigger)
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = getattr(message, "from_id", None)
    peer = message.peer_id
    uid_int: Optional[int] = None

    if user_id is not None:
        try:
            uid_int = int(user_id)
            if _allow_greeted_recently(uid_int):
                return
        except (TypeError, ValueError):
            uid_int = None

    if uid_int is not None:
        _mark_allow_greeting(uid_int)

    try:
        try:
            await bot.state_dispenser.delete(peer)
        except (KeyError, Exception):
            pass
    except Exception:
        pass

    if user_id is not None:
        try:
            user_data.pop(str(user_id), None)
        except Exception:
            pass

    await message.answer(f"{MENU_GREETING}", keyboard=main_menu_inline())


@bot.on.raw_event(GroupEventType.MESSAGE_ALLOW, dataclass=GroupTypes.MessageAllow)
async def show_menu_on_allow(event: GroupTypes.MessageAllow):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."""
    user_id = getattr(getattr(event, "object", None), "user_id", None)
    if not user_id:
        return

    uid_int: Optional[int] = None
    try:
        uid_int = int(user_id)
        if _allow_greeted_recently(uid_int):
            return
        _mark_allow_greeting(uid_int)
    except (TypeError, ValueError):
        uid_int = None

    try:
        await bot.api.messages.send(
            user_id=user_id,
            random_id=_random_id(),
            message=f"{MENU_GREETING}",
            keyboard=main_menu_inline(),
        )
    except Exception:
        pass


@bot.on.message(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'."""
    support_text = (
        "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å,\n"
        "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n\n"
        f"üë§ {SUPPORT_URL}"
    )
    await message.answer(support_text, keyboard=main_menu_inline())


@bot.on.message(text=["–ù–∞–∑–∞–¥", "–ú–µ–Ω—é", "–û—Ç–º–µ–Ω–∞"])
async def global_back_or_menu(message: Message):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."""
    peer = message.peer_id

    try:
        try:
            await bot.state_dispenser.delete(peer)
        except (KeyError, Exception):
            pass
    except (KeyError, Exception):
        pass

    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())


@bot.on.message()
async def fallback_menu(message: Message):
    """Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö."""
    if getattr(message, "state_peer", None):
        return
    if _is_start_trigger(message):
        return

    text_value = (message.text or "").strip().lower()
    if text_value in START_COMMANDS or text_value in {"–º–µ–Ω—é", "–Ω–∞–∑–∞–¥", "–æ—Ç–º–µ–Ω–∞"}:
        return

    await message.answer(f"{MENU_GREETING}", keyboard=main_menu_inline())
