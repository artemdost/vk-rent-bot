"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
"""
import logging
import json
from vkbottle.bot import Message
from vkbottle import Keyboard, KeyboardButtonColor, Text, Callback

from bot.bot_instance import bot, search_sessions
from bot.keyboards import (
    main_menu_inline,
    subscriptions_list_keyboard,
    subscription_actions_keyboard,
)
from bot.states import SearchStates
from storage import storage

logger = logging.getLogger("subscriptions_handlers")


def format_filters(filters: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    parts = []

    district = filters.get("district")
    if district:
        parts.append(f"–†–∞–π–æ–Ω: {district}")
    else:
        parts.append("–†–∞–π–æ–Ω: –ª—é–±–æ–π")

    price_min = filters.get("price_min")
    price_max = filters.get("price_max")
    if price_min and price_max:
        parts.append(f"–¶–µ–Ω–∞: {price_min:,} - {price_max:,} ‚ÇΩ".replace(",", " "))
    elif price_min:
        parts.append(f"–¶–µ–Ω–∞: –æ—Ç {price_min:,} ‚ÇΩ".replace(",", " "))
    elif price_max:
        parts.append(f"–¶–µ–Ω–∞: –¥–æ {price_max:,} ‚ÇΩ".replace(",", " "))
    else:
        parts.append("–¶–µ–Ω–∞: –ª—é–±–∞—è")

    rooms = filters.get("rooms")
    if rooms:
        parts.append(f"–ö–æ–º–Ω–∞—Ç: {rooms}")
    else:
        parts.append("–ö–æ–º–Ω–∞—Ç: –ª—é–±–æ–µ")

    recent_days = filters.get("recent_days")
    if recent_days == 7:
        parts.append("–ü–µ—Ä–∏–æ–¥: 7 –¥–Ω–µ–π")
    elif recent_days == 30:
        parts.append("–ü–µ—Ä–∏–æ–¥: 30 –¥–Ω–µ–π")
    else:
        parts.append("–ü–µ—Ä–∏–æ–¥: –ª—é–±–æ–π")

    return "\n".join(parts)


@bot.on.message(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def subscribe_to_notifications(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–∏—Å–∫—É."""
    uid = str(message.from_id)
    user_id = message.from_id

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞
    session = search_sessions.get(uid)
    if not session or not session.get("results"):
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
            keyboard=main_menu_inline(),
        )
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–µ—Å—Å–∏–∏
    filters = {
        "district": session.get("district"),
        "price_min": session.get("price_min"),
        "price_max": session.get("price_max"),
        "rooms": session.get("rooms"),
        "recent_days": session.get("recent_days"),
    }

    # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫—É
    sub_id = storage.add_subscription(user_id, filters)

    filter_text = format_filters(filters)

    await message.answer(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n\n"
        f"{filter_text}\n\n"
        f"–£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        keyboard=main_menu_inline(),
    )

    logger.info("User %s subscribed with ID %s", user_id, sub_id)


@bot.on.message(text="–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
async def show_subscriptions(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_id
    subscriptions = storage.get_user_subscriptions(user_id)

    if not subscriptions:
        await message.answer(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n"
            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å¬ª\n"
            "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞\n"
            "3. –ù–∞–∂–º–∏—Ç–µ ¬´üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª",
            keyboard=main_menu_inline(),
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å–æ–∫
    text = f"üì¨ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ({len(subscriptions)}):\n\n"

    for idx, sub in enumerate(subscriptions, 1):
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if sub.get("enabled", True) else "‚è∏ –û—Ç–∫–ª—é—á–µ–Ω–∞"
        filter_text = format_filters(sub.get("filters", {}))

        text += f"{idx}. {status}\n"
        text += f"ID: {sub['id']}\n"
        text += f"{filter_text}\n\n"

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    kb = Keyboard(inline=True)

    for idx, sub in enumerate(subscriptions, 1):
        is_enabled = sub.get("enabled", True)
        icon = "‚úÖ" if is_enabled else "‚è∏"
        kb.add(Text(f"{icon} –ü–æ–¥–ø–∏—Å–∫–∞ #{idx}"))
        if idx % 2 == 0:
            kb.row()

    if len(subscriptions) % 2 != 0:
        kb.row()

    kb.add(Text("–ú–µ–Ω—é"), color=KeyboardButtonColor.NEGATIVE)

    await message.answer(text, keyboard=kb.get_json())


@bot.on.message()
async def handle_subscription_action(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
    text = (message.text or "").strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not text.startswith("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ #") and not text.startswith("‚è∏ –ü–æ–¥–ø–∏—Å–∫–∞ #"):
        return

    user_id = message.from_id
    uid = str(user_id)
    subscriptions = storage.get_user_subscriptions(user_id)

    if not subscriptions:
        await message.answer(
            "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            keyboard=main_menu_inline(),
        )
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        sub_num = int(text.split("#")[1])
        if sub_num < 1 or sub_num > len(subscriptions):
            raise ValueError()
        sub = subscriptions[sub_num - 1]
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏.",
            keyboard=main_menu_inline(),
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    from bot.bot_instance import search_sessions
    if uid not in search_sessions:
        search_sessions[uid] = {}
    search_sessions[uid]["current_subscription_id"] = sub["id"]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    is_enabled = sub.get("enabled", True)
    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if is_enabled else "‚è∏ –û—Ç–∫–ª—é—á–µ–Ω–∞"
    filter_text = format_filters(sub.get("filters", {}))

    response_text = (
        f"üìã –ü–æ–¥–ø–∏—Å–∫–∞ #{sub_num}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"ID: {sub['id']}\n\n"
        f"{filter_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    kb = Keyboard(inline=True)

    if is_enabled:
        kb.add(Text("‚è∏ –û—Ç–∫–ª—é—á–∏—Ç—å"))
    else:
        kb.add(Text("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å"), color=KeyboardButtonColor.POSITIVE)

    kb.add(Text("üóë –£–¥–∞–ª–∏—Ç—å"), color=KeyboardButtonColor.NEGATIVE)
    kb.row()
    kb.add(Text("‚¨ÖÔ∏è –ö –ø–æ–¥–ø–∏—Å–∫–∞–º"), color=KeyboardButtonColor.PRIMARY)

    await message.answer(response_text, keyboard=kb.get_json())


@bot.on.message(text=["‚è∏ –û—Ç–∫–ª—é—á–∏—Ç—å", "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å"])
async def toggle_subscription(message: Message):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = message.from_id
    uid = str(user_id)

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
    from bot.bot_instance import search_sessions
    session = search_sessions.get(uid, {})
    sub_id = session.get("current_subscription_id")

    if not sub_id:
        await message.answer(
            "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
            keyboard=main_menu_inline(),
        )
        return

    new_status = storage.toggle_subscription(user_id, sub_id)

    status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"

    await message.answer(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {status_text}.",
    )

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
    await show_subscriptions(message)


@bot.on.message(text="üóë –£–¥–∞–ª–∏—Ç—å")
async def delete_subscription(message: Message):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É."""
    user_id = message.from_id
    uid = str(user_id)

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
    from bot.bot_instance import search_sessions
    session = search_sessions.get(uid, {})
    sub_id = session.get("current_subscription_id")

    if not sub_id:
        await message.answer(
            "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
            keyboard=main_menu_inline(),
        )
        return

    success = storage.delete_subscription(user_id, sub_id)

    if success:
        await message.answer(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞.",
        )
        logger.info("User %s deleted subscription %s", user_id, sub_id)
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        if "current_subscription_id" in session:
            del session["current_subscription_id"]
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await show_subscriptions(message)
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
            keyboard=main_menu_inline(),
        )


@bot.on.message(text="‚¨ÖÔ∏è –ö –ø–æ–¥–ø–∏—Å–∫–∞–º")
async def back_to_subscriptions(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫."""
    await show_subscriptions(message)
