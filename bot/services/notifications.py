"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.
"""
import logging
import asyncio
import random
from typing import Dict, Any, List, Optional

from bot.config import GROUP_ID, TOKEN_FOR_BOT
from bot.services.vk_api import vk_api_call
from bot.services.search import parse_post_text
from storage import storage

logger = logging.getLogger("notifications")


def _random_id() -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    return random.randint(-2_147_483_648, 2_147_483_647)


def match_post_with_filters(parsed_post: Dict[str, Any], filters: Dict[str, Any]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–¥–ø–∏—Å–∫–∏.

    Args:
        parsed_post: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        filters: –§–∏–ª—å—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏

    Returns:
        True –µ—Å–ª–∏ –ø–æ—Å—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä—ã
    """
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–π–æ–Ω—É
    district_filter = filters.get("district")
    if district_filter:
        district = parsed_post.get("district")
        if not district or district.lower() != district_filter.lower():
            return False

    # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
    price_value = parsed_post.get("price_value")
    price_min = filters.get("price_min")
    price_max = filters.get("price_max")

    if price_min is not None:
        if price_value is None or price_value < price_min:
            return False
    if price_max is not None:
        if price_value is None or price_value > price_max:
            return False

    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
    rooms_value = parsed_post.get("rooms_value")
    rooms_filter = filters.get("rooms")
    if rooms_filter is not None:
        if rooms_value is None or rooms_value != rooms_filter:
            return False

    return True


async def send_notification(user_id: int, post: Dict[str, Any], filters: Dict[str, Any]) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        post: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        filters: –§–∏–ª—å—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞)

    Returns:
        True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        post_id = post.get("id")
        owner_id = -abs(int(GROUP_ID))
        attachment = f"wall{owner_id}_{post_id}" if post_id else None

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        filter_parts = []
        if filters.get("district"):
            filter_parts.append(f"–†–∞–π–æ–Ω: {filters['district']}")
        if filters.get("price_min"):
            filter_parts.append(f"–¶–µ–Ω–∞ –æ—Ç: {filters['price_min']}")
        if filters.get("price_max"):
            filter_parts.append(f"–¶–µ–Ω–∞ –¥–æ: {filters['price_max']}")
        if filters.get("rooms"):
            filter_parts.append(f"–ö–æ–º–Ω–∞—Ç: {filters['rooms']}")

        filter_text = ", ".join(filter_parts) if filter_parts else "–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"

        message = (
            f"üîî –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ:\n"
            f"{filter_text}\n\n"
            f"–°–º–æ—Ç—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ:"
        )

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
        from bot.keyboards import main_menu_inline

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ vk_api_call
        response = vk_api_call(
            "messages.send",
            {
                "user_id": user_id,
                "random_id": _random_id(),
                "message": message,
                "attachment": attachment,
                "keyboard": main_menu_inline(),  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            },
            token=TOKEN_FOR_BOT,
        )

        if "error" in response:
            logger.warning(
                "Failed to send notification to user %s: %s",
                user_id,
                response["error"].get("error_msg"),
            )
            return False

        return True

    except Exception as e:
        logger.exception("Error sending notification to user %s: %s", user_id, e)
        return False


async def check_new_posts_and_notify() -> int:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.

    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    from bot.config import USER_TOKEN, UPLOAD_TOKEN

    if not GROUP_ID:
        logger.warning("GROUP_ID not configured, skipping notification check")
        return 0

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º USER_TOKEN –∏–ª–∏ UPLOAD_TOKEN –¥–ª—è wall.get
    token_for_wall = USER_TOKEN or UPLOAD_TOKEN
    if not token_for_wall:
        logger.warning("USER_TOKEN or UPLOAD_TOKEN not configured, skipping notification check")
        return 0

    try:
        owner_id = -abs(int(GROUP_ID))
        last_checked_id = storage.get_last_checked_post_id()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
        response = vk_api_call(
            "wall.get",
            {
                "owner_id": owner_id,
                "count": 10,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å—Ç–æ–≤
                "offset": 0,
            },
            token=token_for_wall,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user token –≤–º–µ—Å—Ç–æ group token
        )

        if "error" in response:
            logger.warning("Failed to fetch posts: %s", response["error"].get("error_msg"))
            return 0

        items = response.get("response", {}).get("items", [])
        if not items:
            return 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        new_posts = []
        latest_post_id = items[0].get("id") if items else last_checked_id

        for post in items:
            post_id = post.get("id")
            if last_checked_id is None or post_id > last_checked_id:
                new_posts.append(post)

        if not new_posts:
            return 0

        logger.info("Found %d new posts", len(new_posts))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        active_subs = storage.get_all_active_subscriptions()
        if not active_subs:
            # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
            if latest_post_id:
                storage.set_last_checked_post_id(latest_post_id)
            return 0

        notifications_sent = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç
        for post in new_posts:
            text = post.get("text", "")
            parsed = parse_post_text(text)

            if not parsed:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å–∫—É
            for user_id, subscription in active_subs:
                filters = subscription.get("filters", {})

                if match_post_with_filters(parsed, filters):
                    success = await send_notification(user_id, post, filters)
                    if success:
                        notifications_sent += 1
                        logger.info(
                            "Sent notification to user %s for post %s",
                            user_id,
                            post.get("id"),
                        )

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)

        # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        if latest_post_id:
            storage.set_last_checked_post_id(latest_post_id)

        logger.info("Sent %d notifications", notifications_sent)
        return notifications_sent

    except Exception as e:
        logger.exception("Error checking new posts: %s", e)
        return 0


async def notification_loop():
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.
    """
    logger.info("Notification loop started")

    while True:
        try:
            await check_new_posts_and_notify()
        except Exception as e:
            logger.exception("Error in notification loop: %s", e)

        # –ñ–¥—ë–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(300)
