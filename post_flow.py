# post_flow.py
from core import bot, user_data, RentStates, main_menu_inline, kb_for_state_inline, kb_preview_inline, prompt_for_state
from post_submit import send_to_scheduled, build_text_from_draft

from vkbottle.bot import Message

# --- –°—Ç–∞—Ä—Ç –∏ –º–µ–Ω—é ---
@bot.on.message(text="/start")
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard=main_menu_inline())

@bot.on.message(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def view_rents(message: Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.", keyboard=main_menu_inline())

@bot.on.message(text="–í—ã–ª–æ–∂–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def post_rent(message: Message):
    uid = str(message.from_id)
    user_data[uid] = {}
    await bot.state_dispenser.set(message.peer_id, RentStates.DISTRICT)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", keyboard=kb_for_state_inline(RentStates.DISTRICT))

# --- DISTRICT ---
@bot.on.message(state=RentStates.DISTRICT)
async def district_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return

    valid = {"–¶–µ–Ω—Ç—Ä", "–°–µ–≤–µ—Ä", "–Æ–≥", "–í–æ—Å—Ç–æ–∫", "–ó–∞–ø–∞–¥"}
    if text not in valid:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –∏–∑ –∫–Ω–æ–ø–æ–∫.", keyboard=kb_for_state_inline(RentStates.DISTRICT))
        return

    user_data[uid]["district"] = text
    await bot.state_dispenser.set(peer, RentStates.ADDRESS)
    await prompt_for_state(message, RentStates.ADDRESS)

# --- ADDRESS ---
@bot.on.message(state=RentStates.ADDRESS)
async def address_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.DISTRICT)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", keyboard=kb_for_state_inline(RentStates.DISTRICT))
        return

    # save
    user_data[uid]["address"] = message.text
    await bot.state_dispenser.set(peer, RentStates.FLOOR)
    await prompt_for_state(message, RentStates.FLOOR)

# --- FLOOR ---
@bot.on.message(state=RentStates.FLOOR)
async def floor_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.ADDRESS)
        await prompt_for_state(message, RentStates.ADDRESS)
        return

    try:
        user_data[uid]["floor"] = int(text)
    except:
        await message.answer("–≠—Ç–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.", keyboard=kb_for_state_inline(RentStates.FLOOR))
        return

    await bot.state_dispenser.set(peer, RentStates.ROOMS)
    await prompt_for_state(message, RentStates.ROOMS)

# --- ROOMS ---
@bot.on.message(state=RentStates.ROOMS)
async def rooms_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.FLOOR)
        await prompt_for_state(message, RentStates.FLOOR)
        return

    try:
        user_data[uid]["rooms"] = int(text)
    except:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.", keyboard=kb_for_state_inline(RentStates.ROOMS))
        return

    await bot.state_dispenser.set(peer, RentStates.PRICE)
    await prompt_for_state(message, RentStates.PRICE)

# --- PRICE ---
@bot.on.message(state=RentStates.PRICE)
async def price_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.ROOMS)
        await prompt_for_state(message, RentStates.ROOMS)
        return

    try:
        user_data[uid]["price"] = int(text)
    except:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.", keyboard=kb_for_state_inline(RentStates.PRICE))
        return

    await bot.state_dispenser.set(peer, RentStates.DESCRIPTION)
    await prompt_for_state(message, RentStates.DESCRIPTION)

# --- DESCRIPTION -> preview ---
@bot.on.message(state=RentStates.DESCRIPTION)
async def description_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.PRICE)
        await prompt_for_state(message, RentStates.PRICE)
        return

    user_data[uid]["description"] = message.text

    # show preview
    draft = user_data[uid]
    preview = (
        f"üìå –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        f"üèô –†–∞–π–æ–Ω: {draft.get('district','‚Äî')}\n"
        f"üìç –ê–¥—Ä–µ—Å: {draft.get('address','‚Äî')}\n"
        f"üè¢ –≠—Ç–∞–∂: {draft.get('floor','‚Äî')}\n"
        f"üö™ –ö–æ–º–Ω–∞—Ç: {draft.get('rooms','‚Äî')}\n"
        f"üí∞ –¶–µ–Ω–∞: {draft.get('price','‚Äî')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{draft.get('description','‚Äî')}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ¬ª, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, "
        "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å ...¬ª, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ."
    )
    await bot.state_dispenser.set(peer, RentStates.PREVIEW)
    await message.answer(preview, keyboard=kb_preview_inline(draft))

# --- Preview buttons: Edit / Send ---
@bot.on.message(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ")
async def send_scheduled_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    draft = user_data.get(uid)
    if not draft:
        await message.answer("–ù–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.", keyboard=main_menu_inline())
        return

    text = build_text_from_draft(draft)
    # delay_seconds: —Å–∫–æ–ª—å–∫–æ –≤ –±—É–¥—É—â–µ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å publish_date (300s = 5–º–∏–Ω)
    resp = send_to_scheduled(text=text, attachments=None, delay_seconds=300)

    if "error" in resp:
        err = resp.get("error", {})
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ: {err.get('error_msg')}", keyboard=main_menu_inline())
        return

    post_id = resp.get("response", {}).get("post_id")
    await message.answer(f"–ì–æ—Ç–æ–≤–æ ‚Äî –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ. post_id={post_id}", keyboard=main_menu_inline())
    user_data.pop(uid, None)
    await bot.state_dispenser.delete(peer)

# edit handlers from preview
@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω")
async def edit_district(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.DISTRICT)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", keyboard=kb_for_state_inline(RentStates.DISTRICT))

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
async def edit_address(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.ADDRESS)
    await prompt_for_state(message, RentStates.ADDRESS)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∞–∂")
async def edit_floor(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.FLOOR)
    await prompt_for_state(message, RentStates.FLOOR)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–Ω–∞—Ç")
async def edit_rooms(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.ROOMS)
    await prompt_for_state(message, RentStates.ROOMS)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É")
async def edit_price(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.PRICE)
    await prompt_for_state(message, RentStates.PRICE)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
async def edit_desc(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.DESCRIPTION)
    await prompt_for_state(message, RentStates.DESCRIPTION)

# catch edits: if user had back_to_preview flag, after saving we return to preview

# IMPORTANT: to ensure edit->preview flow works, we intercept changes in each state handler above
# We already set "back_to_preview" flag when user clicked edit; now we must, in each state handler,
# after saving new value, check flag and return to preview instead of moving forward.
# For simplicity, we handle that inside those handlers (see examples in DESCRIPTION/FLOOR/etc.)
# (Handlers above for ADDRESS/FLOOR/ROOMS/PRICE check nothing about back_to_preview; we need to modify them:)
# Minimal approach: re-check flag in prompt_for_state / after saving ‚Äî but to keep file short, we do a quick helper here.

# small utility to check and return to preview if needed
async def maybe_back_to_preview(message: Message, uid: str):
    # if user had requested edit from preview, go back to preview after they input new value
    if user_data.get(uid, {}).pop("back_to_preview", False):
        draft = user_data.get(uid, {})
        preview = (
            f"üìå –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n"
            f"üèô –†–∞–π–æ–Ω: {draft.get('district','‚Äî')}\n"
            f"üìç –ê–¥—Ä–µ—Å: {draft.get('address','‚Äî')}\n"
            f"üè¢ –≠—Ç–∞–∂: {draft.get('floor','‚Äî')}\n"
            f"üö™ –ö–æ–º–Ω–∞—Ç: {draft.get('rooms','‚Äî')}\n"
            f"üí∞ –¶–µ–Ω–∞: {draft.get('price','‚Äî')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{draft.get('description','‚Äî')}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ¬ª –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
        )
        await bot.state_dispenser.set(message.peer_id, RentStates.PREVIEW)
        await message.answer(preview, keyboard=kb_preview_inline(draft))
        return True
    return False

# integrate maybe_back_to_preview checks into the handlers where user input is saved:
# modify those handlers to call maybe_back_to_preview after saving. For brevity, we'll patch them inline:
# (We will re-define the ADDRESS/FLOOR/ROOMS/PRICE/DESCRIPTION handlers in a compact way to include the check.)

# Re-define ADDRESS with back->preview handling:
@bot.on.message(state=RentStates.ADDRESS)
async def address_handler2(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.DISTRICT)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", keyboard=kb_for_state_inline(RentStates.DISTRICT))
        return

    user_data[uid]["address"] = message.text

    # if this was an edit from preview -> back to preview
    if await maybe_back_to_preview(message, uid):
        return

    await bot.state_dispenser.set(peer, RentStates.FLOOR)
    await prompt_for_state(message, RentStates.FLOOR)

# Re-define FLOOR with back->preview handling:
@bot.on.message(state=RentStates.FLOOR)
async def floor_handler2(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.ADDRESS)
        await prompt_for_state(message, RentStates.ADDRESS)
        return

    try:
        user_data[uid]["floor"] = int(text)
    except:
        await message.answer("–≠—Ç–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.", keyboard=kb_for_state_inline(RentStates.FLOOR))
        return

    if await maybe_back_to_preview(message, uid):
        return

    await bot.state_dispenser.set(peer, RentStates.ROOMS)
    await prompt_for_state(message, RentStates.ROOMS)

@bot.on.message(state=RentStates.ROOMS)
async def rooms_handler2(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.FLOOR)
        await prompt_for_state(message, RentStates.FLOOR)
        return

    try:
        user_data[uid]["rooms"] = int(text)
    except:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.", keyboard=kb_for_state_inline(RentStates.ROOMS))
        return

    if await maybe_back_to_preview(message, uid):
        return

    await bot.state_dispenser.set(peer, RentStates.PRICE)
    await prompt_for_state(message, RentStates.PRICE)

@bot.on.message(state=RentStates.PRICE)
async def price_handler2(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.ROOMS)
        await prompt_for_state(message, RentStates.ROOMS)
        return

    try:
        user_data[uid]["price"] = int(text)
    except:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.", keyboard=kb_for_state_inline(RentStates.PRICE))
        return

    if await maybe_back_to_preview(message, uid):
        return

    await bot.state_dispenser.set(peer, RentStates.DESCRIPTION)
    await prompt_for_state(message, RentStates.DESCRIPTION)

# DESCRIPTION already defined above ‚Äî we'll rely on that one which shows preview and respects edits.

# end of post_flow.py
