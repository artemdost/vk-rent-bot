# post_flow.py

# –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
import os
import time
import requests

API_V = os.getenv("VK_API_VERSION", "5.199")
GROUP_ID = int(os.getenv("GROUP_ID", "0"))
GROUP_TOKEN = os.getenv("GROUP_TOKEN")  # —Ç–æ–∫–µ–Ω —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

def send_post_to_scheduled(group_token: str, group_id: int, text: str, attachments: str = None, delay_seconds: int = 3600):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ (publish_date = now + delay_seconds).
    - group_token: —Ç–æ–∫–µ–Ω —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Å –ø—Ä–∞–≤–æ–º wall
    - group_id: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π id –≥—Ä—É–ø–ø—ã
    - text: —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    - attachments: —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "photo<owner>_<id>,doc..." (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - delay_seconds: —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å publish_date (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict (–æ—Ç–≤–µ—Ç VK API).
    """
    if not group_token:
        return {"error": {"error_msg": "GROUP_TOKEN –Ω–µ –∑–∞–¥–∞–Ω"}}

    owner_id = -abs(int(group_id))
    publish_date = int(time.time()) + int(delay_seconds)
    params = {
        "access_token": group_token,
        "owner_id": owner_id,
        "from_group": 1,
        "message": text,
        "publish_date": publish_date,
        "v": API_V,
    }
    if attachments:
        params["attachments"] = attachments

    try:
        r = requests.post("https://api.vk.com/method/wall.post", data=params, timeout=15)
        return r.json()
    except Exception as e:
        return {"error": {"error_msg": str(e)}}


from core import (
    bot,
    RentStates,
    user_data,
    prompt_for_state,
    STATE_PROMPTS,
    normalize_state_name,
    kb_for_state_inline,
    kb_preview_inline,
    published_ads,
    main_menu_inline,      # <- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
)

# helper: —Å–æ–±—Ä–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å preview –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user
async def show_preview(message, uid):
    peer = message.peer_id
    data = user_data.get(uid, {})
    preview = (
        f"üìå –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        f"üèô –†–∞–π–æ–Ω: {data.get('district','‚Äî')}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data.get('address','‚Äî')}\n"
        f"üè¢ –≠—Ç–∞–∂: {data.get('floor','‚Äî')}\n"
        f"üö™ –ö–æ–º–Ω–∞—Ç: {data.get('rooms','‚Äî')}\n"
        f"üí∞ –¶–µ–Ω–∞: {data.get('price','‚Äî')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description','‚Äî')}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ ¬´–†–∞–∑–º–µ—Å—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, —á—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å."
    )
    # —Å—Ç–∞–≤–∏–º PREVIEW state
    await bot.state_dispenser.set(peer, RentStates.PREVIEW)
    # –æ—á–∏—Å—Ç–∏–º —Ñ–ª–∞–≥ (–≤–¥—Ä—É–≥ –æ–Ω –µ—â—ë –±—ã–ª)
    user_data.setdefault(uid, {}).pop("back_to_preview", None)
    await message.answer(preview, keyboard=kb_preview_inline())


# —Å—Ç–∞—Ä—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main)
async def start_posting(message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})
    await bot.state_dispenser.set(message.peer_id, RentStates.DISTRICT)
    await message.answer(STATE_PROMPTS["district"], keyboard=kb_for_state_inline(RentStates.DISTRICT))


# ------------------ state handlers ------------------

@bot.on.message(state=RentStates.DISTRICT)
async def district_handler(message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        # –æ—Ç–º–µ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∏ —á–∏—Å—Ç–∏–º —Ñ–ª–∞–≥
        await bot.state_dispenser.delete(peer)
        user_data.get(uid, {}).pop("back_to_preview", None)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return

    valid = {"–¶–µ–Ω—Ç—Ä", "–°–µ–≤–µ—Ä", "–Æ–≥", "–í–æ—Å—Ç–æ–∫", "–ó–∞–ø–∞–¥"}
    if text not in valid:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –∏–∑ –∫–Ω–æ–ø–æ–∫.", keyboard=kb_for_state_inline(RentStates.DISTRICT))
        return

    user_data[uid]["district"] = text

    # –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ‚Äî —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ preview
    if user_data[uid].pop("back_to_preview", False):
        await show_preview(message, uid)
        return

    # –∏–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π flow: –∏–¥—ë–º –∫ –∞–¥—Ä–µ—Å—É
    await bot.state_dispenser.set(peer, RentStates.ADDRESS)
    await prompt_for_state(message, RentStates.ADDRESS, inline=True)


@bot.on.message(state=RentStates.ADDRESS)
async def address_handler(message):
    uid = str(message.from_id)
    peer = message.peer_id
    user_data.setdefault(uid, {})
    user_data[uid]["address"] = message.text

    if user_data[uid].pop("back_to_preview", False):
        await show_preview(message, uid)
        return

    await bot.state_dispenser.set(peer, RentStates.FLOOR)
    await prompt_for_state(message, RentStates.FLOOR, inline=True)


@bot.on.message(state=RentStates.FLOOR)
async def floor_handler(message):
    uid = str(message.from_id)
    peer = message.peer_id
    user_data.setdefault(uid, {})
    text = (message.text or "").strip()
    try:
        user_data[uid]["floor"] = int(text)
    except:
        await message.answer("–≠—Ç–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.", keyboard=kb_for_state_inline(RentStates.FLOOR))
        return

    if user_data[uid].pop("back_to_preview", False):
        await show_preview(message, uid)
        return

    await bot.state_dispenser.set(peer, RentStates.ROOMS)
    await prompt_for_state(message, RentStates.ROOMS, inline=True)


@bot.on.message(state=RentStates.ROOMS)
async def rooms_handler(message):
    uid = str(message.from_id)
    peer = message.peer_id
    user_data.setdefault(uid, {})
    text = (message.text or "").strip()
    try:
        user_data[uid]["rooms"] = int(text)
    except:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.", keyboard=kb_for_state_inline(RentStates.ROOMS))
        return

    if user_data[uid].pop("back_to_preview", False):
        await show_preview(message, uid)
        return

    await bot.state_dispenser.set(peer, RentStates.PRICE)
    await prompt_for_state(message, RentStates.PRICE, inline=True)


@bot.on.message(state=RentStates.PRICE)
async def price_handler(message):
    uid = str(message.from_id)
    peer = message.peer_id
    user_data.setdefault(uid, {})
    text = (message.text or "").strip()
    try:
        user_data[uid]["price"] = int(text)
    except:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.", keyboard=kb_for_state_inline(RentStates.PRICE))
        return

    if user_data[uid].pop("back_to_preview", False):
        await show_preview(message, uid)
        return

    await bot.state_dispenser.set(peer, RentStates.DESCRIPTION)
    await prompt_for_state(message, RentStates.DESCRIPTION, inline=True)


@bot.on.message(state=RentStates.DESCRIPTION)
async def description_handler(message):
    uid = str(message.from_id)
    peer = message.peer_id
    user_data.setdefault(uid, {})
    user_data[uid]["description"] = message.text

    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (back_to_preview) ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å preview
    if user_data[uid].pop("back_to_preview", False):
        await show_preview(message, uid)
        return

    # –æ–±—ã—á–Ω—ã–π flow (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è) ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å preview
    await show_preview(message, uid)


# ------------------ preview handlers ------------------

@bot.on.message(text="–†–∞–∑–º–µ—Å—Ç–∏—Ç—å")
async def publish_handler(message):
    uid = str(message.from_id)
    peer = message.peer_id
    current = await bot.state_dispenser.get(peer)
    # –¥–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∫–∞–∫ –∏–∑ PREVIEW, —Ç–∞–∫ –∏ –µ—Å–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –µ—Å—Ç—å
    if (current and normalize_state_name(current) != "preview") and uid not in user_data:
        await message.answer("–ù–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", keyboard=main_menu_inline())
        return

    ad = user_data.get(uid, {}).copy()
    ad["author_id"] = uid
    published_ads.append(ad)  # –∑–¥–µ—Å—å –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ –ø—Ä–µ–¥–ª–æ–∂–∫–∞—Ö. –°–ø–∞—Å–∏–±–æ!", keyboard=main_menu_inline())

    # –æ—á–∏—Å—Ç–∫–∞
    await bot.state_dispenser.delete(peer)
    user_data.pop(uid, None)


# ---- edit buttons: —Å—Ç–∞–≤–∏–º back_to_preview –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —à–∞–≥ ----

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω")
async def edit_district_handler(message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.DISTRICT)
    await prompt_for_state(message, RentStates.DISTRICT, inline=True)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
async def edit_address_handler(message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.ADDRESS)
    await prompt_for_state(message, RentStates.ADDRESS, inline=True)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∞–∂")
async def edit_floor_handler(message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.FLOOR)
    await prompt_for_state(message, RentStates.FLOOR, inline=True)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–Ω–∞—Ç")
async def edit_rooms_handler(message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.ROOMS)
    await prompt_for_state(message, RentStates.ROOMS, inline=True)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É")
async def edit_price_handler(message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.PRICE)
    await prompt_for_state(message, RentStates.PRICE, inline=True)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
async def edit_description_handler(message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.DESCRIPTION)
    await prompt_for_state(message, RentStates.DESCRIPTION, inline=True)

# –≤ –ø–æ—Å—Ç-—Ñ–ª–æ—É, –≥–¥–µ —É –≤–∞—Å –µ—Å—Ç—å user_data –∏ draft/preview
@bot.on.message(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ")
async def send_to_scheduled_handler(message):
    uid = str(message.from_id)
    peer = message.peer_id
    draft = user_data.get(uid)
    if not draft:
        await message.answer("–ù–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.", keyboard=main_menu_inline())
        return

    if GROUP_ID == 0 or not GROUP_TOKEN:
        await message.answer(
            "GROUP_ID –∏–ª–∏ GROUP_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –î–æ–±–∞–≤—å –≤ .env:\nGROUP_ID –∏ GROUP_TOKEN (—Ç–æ–∫–µ–Ω —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Å –ø—Ä–∞–≤–æ–º wall).",
            keyboard=main_menu_inline()
        )
        return

    # —Å–æ–±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç (—É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è build_preview_text_for_sending)
    text = (
        f"üèô –†–∞–π–æ–Ω: {draft.get('district','')}\n"
        f"üìç –ê–¥—Ä–µ—Å: {draft.get('address','')}\n"
        f"üè¢ –≠—Ç–∞–∂: {draft.get('floor','')}\n"
        f"üö™ –ö–æ–º–Ω–∞—Ç: {draft.get('rooms','')}\n"
        f"üí∞ –¶–µ–Ω–∞: {draft.get('price','')}\n\n"
        f"{draft.get('description','')}"
    )

    # delay_seconds: –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 60 –∏–ª–∏ 3600.
    # VK –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å publish_date>now => –ø–æ—Å—Ç –æ–∫–∞–∂–µ—Ç—Å—è –≤ "–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏".
    resp = send_post_to_scheduled(GROUP_TOKEN, GROUP_ID, text, attachments=None, delay_seconds=3600)

    if "error" in resp:
        # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        err = resp.get("error", {})
        msg = err.get("error_msg") or str(err)
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ: {msg}", keyboard=main_menu_inline())
        # –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å resp –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("VK send scheduled error:", resp)
        return

    # —É—Å–ø–µ—à–Ω–æ ‚Äî resp['response']['post_id'] –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç id (–µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è)
    await message.answer("–ì–æ—Ç–æ–≤–æ ‚Äî –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.", keyboard=main_menu_inline())
    # –æ—á–∏—Å—Ç–∏–º —á–µ—Ä–Ω–æ–≤–∏–∫ (–∏–ª–∏ –ø–æ–º–µ—Ç–∏–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω)
    user_data.pop(uid, None)

