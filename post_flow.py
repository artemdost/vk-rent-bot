# post_flow.py
import re
from typing import List, Dict, Any, Optional
from vkbottle.bot import Message
from core import (
    bot,
    user_data,
    RentStates,
    main_menu_inline,
    kb_for_state_inline,
    kb_preview_inline,
    kb_photos_inline,
    prompt_for_state,
    STATE_PROMPTS,
)
from post_submit import send_to_scheduled, build_text_from_draft, upload_photos_to_group

# ---------------------------
# Utility helpers
# ---------------------------
def extract_photo_urls_from_message(message: Message) -> List[str]:
    """
    Robustly extract photo URLs from message.attachments (works for vkbottle Attachment objects or dict-like).
    Chooses the largest size (last in sizes array).
    """
    urls: List[str] = []
    atts = getattr(message, "attachments", None) or []
    for a in atts:
        try:
            photo = getattr(a, "photo", None)
            if photo is None:
                raw = a if isinstance(a, dict) else getattr(a, "__dict__", {})
                photo = raw.get("photo")
            if not photo:
                continue
            sizes = getattr(photo, "sizes", None) or photo.get("sizes", [])
            if not sizes:
                # sometimes photo has direct 'photo_604' etc ‚Äî try to pick any url-like field
                if isinstance(photo, dict):
                    for _, v in photo.items():
                        if isinstance(v, str) and v.startswith("http"):
                            urls.append(v)
                            break
                continue
            size = sizes[-1]
            url = getattr(size, "url", None) or size.get("url")
            if url:
                urls.append(url)
        except Exception:
            continue
    return urls

async def maybe_back_to_preview(message: Message, uid: str) -> bool:
    """
    –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ back_to_preview ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–µ–≤—å—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True.
    """
    if user_data.get(uid, {}).pop("back_to_preview", False):
        draft = user_data.get(uid, {})
        preview_text = (
            f"üìå –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n"
            f"üèô –†–∞–π–æ–Ω: {draft.get('district','‚Äî')}\n"
            f"üìç –ê–¥—Ä–µ—Å: {draft.get('address','‚Äî')}\n"
            f"üè¢ –≠—Ç–∞–∂: {draft.get('floor','‚Äî')}\n"
            f"üö™ –ö–æ–º–Ω–∞—Ç: {draft.get('rooms','‚Äî')}\n"
            f"üí∞ –¶–µ–Ω–∞: {draft.get('price','‚Äî')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{draft.get('description','‚Äî')}\n\n"
            f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {draft.get('fio','‚Äî')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {draft.get('phone','‚Äî')}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ¬ª –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
        )
        await bot.state_dispenser.set(message.peer_id, RentStates.PREVIEW)
        await message.answer(preview_text, keyboard=kb_preview_inline(draft))
        return True
    return False

# ---------------------------
# Entry / Menu
# ---------------------------
@bot.on.message(text="/start")
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard=main_menu_inline())

@bot.on.message(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def view_rents(message: Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.", keyboard=main_menu_inline())

@bot.on.message(text="–í—ã–ª–æ–∂–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def post_rent_start(message: Message):
    uid = str(message.from_id)
    user_data[uid] = {}
    await bot.state_dispenser.set(message.peer_id, RentStates.DISTRICT)
    await message.answer(STATE_PROMPTS[RentStates.DISTRICT], keyboard=kb_for_state_inline(RentStates.DISTRICT))

# ---------------------------
# DISTRICT
# ---------------------------
@bot.on.message(state=RentStates.DISTRICT)
async def district_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return

    valid = {"–¶–µ–Ω—Ç—Ä", "–°–µ–≤–µ—Ä", "–Æ–≥", "–í–æ—Å—Ç–æ–∫", "–ó–∞–ø–∞–¥"}
    if text not in valid:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –∏–∑ –∫–Ω–æ–ø–æ–∫.", keyboard=kb_for_state_inline(RentStates.DISTRICT))
        return

    user_data[uid]["district"] = text
    await bot.state_dispenser.set(peer, RentStates.ADDRESS)
    await prompt_for_state(message, RentStates.ADDRESS)

# ---------------------------
# ADDRESS
# ---------------------------
@bot.on.message(state=RentStates.ADDRESS)
async def address_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.DISTRICT)
        await message.answer(STATE_PROMPTS[RentStates.DISTRICT], keyboard=kb_for_state_inline(RentStates.DISTRICT))
        return

    user_data[uid]["address"] = message.text
    if await maybe_back_to_preview(message, uid):
        return

    await bot.state_dispenser.set(peer, RentStates.FLOOR)
    await prompt_for_state(message, RentStates.FLOOR)

# ---------------------------
# FLOOR
# ---------------------------
@bot.on.message(state=RentStates.FLOOR)
async def floor_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.ADDRESS)
        await prompt_for_state(message, RentStates.ADDRESS)
        return

    try:
        user_data[uid]["floor"] = int(text)
    except Exception:
        await message.answer("–≠—Ç–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.", keyboard=kb_for_state_inline(RentStates.FLOOR))
        return

    if await maybe_back_to_preview(message, uid):
        return

    await bot.state_dispenser.set(peer, RentStates.ROOMS)
    await prompt_for_state(message, RentStates.ROOMS)

# ---------------------------
# ROOMS
# ---------------------------
@bot.on.message(state=RentStates.ROOMS)
async def rooms_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.FLOOR)
        await prompt_for_state(message, RentStates.FLOOR)
        return

    try:
        user_data[uid]["rooms"] = int(text)
    except Exception:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.", keyboard=kb_for_state_inline(RentStates.ROOMS))
        return

    if await maybe_back_to_preview(message, uid):
        return

    await bot.state_dispenser.set(peer, RentStates.PRICE)
    await prompt_for_state(message, RentStates.PRICE)

# ---------------------------
# PRICE
# ---------------------------
@bot.on.message(state=RentStates.PRICE)
async def price_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.ROOMS)
        await prompt_for_state(message, RentStates.ROOMS)
        return

    try:
        user_data[uid]["price"] = int(text)
    except Exception:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.", keyboard=kb_for_state_inline(RentStates.PRICE))
        return

    if await maybe_back_to_preview(message, uid):
        return

    await bot.state_dispenser.set(peer, RentStates.DESCRIPTION)
    await prompt_for_state(message, RentStates.DESCRIPTION)

# ---------------------------
# DESCRIPTION -> PHOTOS
# ---------------------------
@bot.on.message(state=RentStates.DESCRIPTION)
async def description_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.PRICE)
        await prompt_for_state(message, RentStates.PRICE)
        return

    user_data[uid]["description"] = message.text
    # Next step: photos
    await bot.state_dispenser.set(peer, RentStates.PHOTOS)
    await message.answer(STATE_PROMPTS.get(RentStates.PHOTOS, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å."), keyboard=kb_photos_inline())

# ---------------------------
# PHOTOS (accept photo attachments, "–ì–æ—Ç–æ–≤–æ"/"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
# ---------------------------
@bot.on.message(state=RentStates.PHOTOS)
async def photos_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    # Buttons
    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.DESCRIPTION)
        await prompt_for_state(message, RentStates.DESCRIPTION)
        return
    if text in ("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ì–æ—Ç–æ–≤–æ"):
        await bot.state_dispenser.set(peer, RentStates.FIO)
        await prompt_for_state(message, RentStates.FIO)
        return

    # If attachments contain photos - extract and store
    photo_urls = extract_photo_urls_from_message(message)
    if photo_urls:
        user_data[uid].setdefault("photo_urls", []).extend(photo_urls)
        cnt = len(user_data[uid]["photo_urls"])
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(photo_urls)} —Ñ–æ—Ç–æ. –í—Å–µ–≥–æ: {cnt}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª/¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", keyboard=kb_photos_inline())
        return

    # otherwise prompt user
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (—Ñ–∞–π–ª) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª/¬´–ì–æ—Ç–æ–≤–æ¬ª.", keyboard=kb_photos_inline())

# ---------------------------
# FIO
# ---------------------------
@bot.on.message(state=RentStates.FIO)
async def fio_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.PHOTOS)
        await message.answer(STATE_PROMPTS.get(RentStates.PHOTOS, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å."), keyboard=kb_photos_inline())
        return

    if not text or len(text) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –§–ò–û (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è).", keyboard=kb_for_state_inline(RentStates.FIO))
        return

    user_data[uid]["fio"] = text
    await bot.state_dispenser.set(peer, RentStates.PHONE)
    await prompt_for_state(message, RentStates.PHONE)

# ---------------------------
# PHONE
# ---------------------------
@bot.on.message(state=RentStates.PHONE)
async def phone_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    text = (message.text or "").strip()
    user_data.setdefault(uid, {})

    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    if text == "–ù–∞–∑–∞–¥":
        await bot.state_dispenser.set(peer, RentStates.FIO)
        await prompt_for_state(message, RentStates.FIO)
        return

    normalized = re.sub(r"[^\d+]", "", text)
    if normalized.count("+") > 1:
        normalized = normalized.replace("+", "")
        normalized = "+" + normalized
    digits = re.sub(r"\D", "", normalized)
    if len(digits) < 7:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä ‚Äî –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 7 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", keyboard=kb_for_state_inline(RentStates.PHONE))
        return

    user_data[uid]["phone"] = normalized

    # show preview
    draft = user_data[uid]
    preview_text = (
        f"üìå –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        f"üèô –†–∞–π–æ–Ω: {draft.get('district','‚Äî')}\n"
        f"üìç –ê–¥—Ä–µ—Å: {draft.get('address','‚Äî')}\n"
        f"üè¢ –≠—Ç–∞–∂: {draft.get('floor','‚Äî')}\n"
        f"üö™ –ö–æ–º–Ω–∞—Ç: {draft.get('rooms','‚Äî')}\n"
        f"üí∞ –¶–µ–Ω–∞: {draft.get('price','‚Äî')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{draft.get('description','‚Äî')}\n\n"
        f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {draft.get('fio','‚Äî')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {draft.get('phone','‚Äî')}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ¬ª, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, "
        "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å ...¬ª, —á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ."
    )
    await bot.state_dispenser.set(peer, RentStates.PREVIEW)
    await message.answer(preview_text, keyboard=kb_preview_inline(draft))

# ---------------------------
# Preview actions: Send and Edit buttons
# ---------------------------
@bot.on.message(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ")
async def send_scheduled_handler(message: Message):
    uid = str(message.from_id)
    peer = message.peer_id
    draft = user_data.get(uid)
    if not draft:
        await message.answer("–ù–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.", keyboard=main_menu_inline())
        return

    text = build_text_from_draft(draft)
    if not isinstance(text, str):
        text = str(text)

    attachments: Optional[str] = None
    photo_urls = draft.get("photo_urls") or []
    if photo_urls:
        await message.answer("–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)")
        upload_resp = upload_photos_to_group(photo_urls)
        if "error" in upload_resp:
            err = upload_resp.get("error", {})
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {err.get('error_msg')}", keyboard=main_menu_inline())
            return
        attachments = upload_resp.get("response", {}).get("attachments")

    try:
        resp = send_to_scheduled(text=text, attachments=attachments, delay_seconds=300)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", keyboard=main_menu_inline())
        return

    if "error" in resp:
        err = resp.get("error", {})
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ: {err.get('error_msg')}", keyboard=main_menu_inline())
        return

    post_id = resp.get("response", {}).get("post_id")
    if post_id:
        await message.answer(
            f"–ì–æ—Ç–æ–≤–æ ‚Äî –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ. post_id={post_id}\n"
            f"–§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ).",
            keyboard=main_menu_inline()
        )
    else:
        await message.answer("–ì–æ—Ç–æ–≤–æ ‚Äî –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω–∫—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.", keyboard=main_menu_inline())

    # clear draft and state
    user_data.pop(uid, None)
    await bot.state_dispenser.delete(peer)

# ---------------------------
# Edit handlers (from preview)
# ---------------------------
@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω")
async def edit_district(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.DISTRICT)
    await message.answer(STATE_PROMPTS[RentStates.DISTRICT], keyboard=kb_for_state_inline(RentStates.DISTRICT))

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")
async def edit_address(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.ADDRESS)
    await prompt_for_state(message, RentStates.ADDRESS)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∞–∂")
async def edit_floor(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.FLOOR)
    await prompt_for_state(message, RentStates.FLOOR)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–Ω–∞—Ç")
async def edit_rooms(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.ROOMS)
    await prompt_for_state(message, RentStates.ROOMS)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É")
async def edit_price(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.PRICE)
    await prompt_for_state(message, RentStates.PRICE)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
async def edit_description(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.DESCRIPTION)
    await prompt_for_state(message, RentStates.DESCRIPTION)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û")
async def edit_fio(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.FIO)
    await prompt_for_state(message, RentStates.FIO)

@bot.on.message(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def edit_phone(message: Message):
    uid = str(message.from_id)
    user_data.setdefault(uid, {})["back_to_preview"] = True
    await bot.state_dispenser.set(message.peer_id, RentStates.PHONE)
    await prompt_for_state(message, RentStates.PHONE)

# ---------------------------
# Fallback global handlers (optional)
# ---------------------------
@bot.on.message(text=["–ù–∞–∑–∞–¥", "–ú–µ–Ω—é"])
async def global_back_or_menu(message: Message):
    text = (message.text or "").strip()
    peer = message.peer_id
    if text == "–ú–µ–Ω—é":
        await bot.state_dispenser.delete(peer)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
        return
    await bot.state_dispenser.delete(peer)
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", keyboard=main_menu_inline())
