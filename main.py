from vkbottle.bot import Bot, Message
from dotenv import load_dotenv
import os
from vkbottle import Bot, Keyboard, KeyboardButtonColor, Text
from vkbottle import BaseStateGroup
'''from vkbottle.dispatch.rules.base import StateRule
from vkbottle.dispatch.views import StatefulView
from vkbottle.dispatch.views import StateFilter
from vkbottle.modules import json'''
load_dotenv()

token = os.getenv("VK_TOKEN")

bot = Bot(token=token)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è --- #
class RentStates(BaseStateGroup):
    DISTRICT = "district"
    ADDRESS = "address"
    FLOOR = "floor"
    ROOMS = "rooms"
    PRICE = "price"
    DESCRIPTION = "description"

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã—å–æ—Ä–æ–º –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è --- #
def main_menu_keyboard():
    kb = (
        Keyboard(one_time=False)
        .add(Text("–í—ã–ª–æ–∂–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"), color=KeyboardButtonColor.PRIMARY)
        .add(Text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è"), color=KeyboardButtonColor.SECONDARY)
    )
    return kb.get_json()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–∞–π–æ–Ω–∞–º–∏ ---
def district_keyboard():
    kb = (
        Keyboard(one_time=True, inline=False)
        .add(Text("–¶–µ–Ω—Ç—Ä"), color=KeyboardButtonColor.PRIMARY)
        .add(Text("–°–µ–≤–µ—Ä"), color=KeyboardButtonColor.PRIMARY)
        .row()
        .add(Text("–Æ–≥"), color=KeyboardButtonColor.PRIMARY)
        .add(Text("–í–æ—Å—Ç–æ–∫"), color=KeyboardButtonColor.PRIMARY)
        .row()
        .add(Text("–ó–∞–ø–∞–¥"), color=KeyboardButtonColor.PRIMARY)
    )
    return kb.get_json()


# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_data = {}


# --- –°—Ç–∞—Ä—Ç ---
@bot.on.message(text="/start")
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard=main_menu_keyboard())


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@bot.on.message(text="–í—ã–ª–æ–∂–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def post_rent(message: Message):
    user_data[message.from_id] = {}
    await bot.state_dispenser.set(message.peer_id, RentStates.DISTRICT)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", keyboard=district_keyboard())


@bot.on.message(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def view_rent(message: Message):
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞).")


# --- –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ ---
@bot.on.message(state=RentStates.DISTRICT)
async def district_handler(message: Message):
    if message.text not in ["–¶–µ–Ω—Ç—Ä", "–°–µ–≤–µ—Ä", "–Æ–≥", "–í–æ—Å—Ç–æ–∫", "–ó–∞–ø–∞–¥"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return

    user_data[message.from_id]["district"] = message.text
    await bot.state_dispenser.set(message.peer_id, RentStates.ADDRESS)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")


# --- –ê–¥—Ä–µ—Å ---
@bot.on.message(state=RentStates.ADDRESS)
async def address_handler(message: Message):
    user_data[message.from_id]["address"] = message.text
    await bot.state_dispenser.set(message.peer_id, RentStates.FLOOR)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂:")


# --- –≠—Ç–∞–∂ ---
@bot.on.message(state=RentStates.FLOOR)
async def floor_handler(message: Message):
    user_data[message.from_id]["floor"] = message.text
    await bot.state_dispenser.set(message.peer_id, RentStates.ROOMS)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:")


# --- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç ---
@bot.on.message(state=RentStates.ROOMS)
async def rooms_handler(message: Message):
    user_data[message.from_id]["rooms"] = message.text
    await bot.state_dispenser.set(message.peer_id, RentStates.PRICE)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")


# --- –¶–µ–Ω–∞ ---
@bot.on.message(state=RentStates.PRICE)
async def price_handler(message: Message):
    user_data[message.from_id]["price"] = message.text
    await bot.state_dispenser.set(message.peer_id, RentStates.DESCRIPTION)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:")


# --- –û–ø–∏—Å–∞–Ω–∏–µ ---
@bot.on.message(state=RentStates.DESCRIPTION)
async def description_handler(message: Message):
    user_data[message.from_id]["description"] = message.text

    data = user_data[message.from_id]
    text = (
        f"üìå –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n"
        f"üèô –†–∞–π–æ–Ω: {data['district']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üè¢ –≠—Ç–∞–∂: {data['floor']}\n"
        f"üö™ –ö–æ–º–Ω–∞—Ç: {data['rooms']}\n"
        f"üí∞ –¶–µ–Ω–∞: {data['price']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"
    )

    await message.answer(text)
    await bot.state_dispenser.delete(message.peer_id)


bot.run_forever()